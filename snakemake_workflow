

import glob
from pathlib import Path
import os

samples, = glob_wildcards("raw_fastq/{sample}_R1.fastq.gz")
parts,reps, = glob_wildcards("raw_fastq/{part}_{rep}_R1.fastq.gz")


parts = list(set(parts))
reps = list(set(reps))
samples = list(set(samples))
print(parts)
print(samples)

print(reps)


rule all:
	input:
             "status/fastqc-complete",
             #"status/trimmomatic-complete",
             #"status/fastqc-trim-complete",
             #"Genome-index",
             #expand("STAR/{sample}/Aligned.sortedByCoord.out.bam", sample=samples), 
             #expand("samtools-merge/{part}.bam", part=parts), 
             #expand("samtools-sort/{sample}.bam", sample=samples),
             #expand("samtools-index/{part}.bam.bai", part=parts), 
             #expand("samtools-sort/{group}.txt",group=["PRPF31","SCR"]),
             #"results-rmats/flag",
 


def get_matches(sample): 

        list = []

        for i in samples: 
                star_file = f"STAR/{samples}/Aligned.sortedByCoord.out.bam"
                raw_data = f"raw_fastq/{samples}_R1.fastq.gz"

                if Path(raw_data).exists(): 
                        list.append(star_file)
        return list


rule samtools_merge_all: 
        input: expand("samtools-merge/{i}.bam", i=reps), 

rule samtools_merge: 
        input: get_matches
        output: 
                "samtools-merge/{part}_{i}.bam"
        params: 
                ""
        log: 
                "logs/samtools/{part}_{i}.log"
        threads: 
                8
        wrapper: 
                "0.74.0/bio/samtools/merge"



rule samtools_sort_all: 
        input: expand("samtools-sort/{i}.bam", i=samples), 

rule samtools_sort: 
        input: get_matches
        output: 
                "samtools-sort/{i}.bam"
        params: 
                extra = "-m 4G", 
                tmp_dir = "/tmp/"
        threads: 
                8
        wrapper: 
                "0.22.0/bio/samtools/sort"


rule samtools_index_all: 
        input: expand("samtools-index/{part}_{i}.bam.bai", part=parts, i=reps), 

rule samtools_index: 
        input: "samtools-sort/{part}_{i}.bam"
        output: 
                "samtools-index/{part}_{i}.bam.bai"
        params: 
                "" 
        wrapper: 
                "0.74.0/bio/samtools/index"


rule fastqc_all:
	input: expand("results-fastqc/{sample}_R1_fastqc.html", sample=samples),
	      expand("results-fastqc/{sample}_R2_fastqc.html", sample=samples),
	output: "status/fastqc-complete"
	shell: "touch {output}" #kommentar. Creat output file von output.

rule fastqc:
	input:
		"raw_fastq/{sample_full}.fastq.gz"
	output:
		html="results-fastqc/{sample_full}_fastqc.html",
		zip="results-fastqc/{sample_full}_fastqc.zip"
	params: ""
	log:
		"logs/fastqc/{sample_full}.log"
	threads: 1
	wrapper:
		"0.66.0/bio/fastqc"


rule trimmomatic_all:
	input: expand("trimmed/{sample}_R1.fastq.gz", sample=samples)
	output: "status/trimmomatic-complete"
	shell: "touch {output}"

rule trimmomatic_pe:
        input:
            r1="raw_fastq/{sample}_R1.fastq.gz",
            r2="raw_fastq/{sample}_R2.fastq.gz"
        output:
            r1="trimmed/{sample}_R1.fastq.gz",
            r2="trimmed/{sample}_R2.fastq.gz",
            # reads where trimming entirely removed the mate
            r1_unpaired="trimmed/{sample}_R1.unpaired.fastq.gz",
            r2_unpaired="trimmed/{sample}_R2.unpaired.fastq.gz"
        log:
            "logs/trimmomatic/{sample}.log"
        params:
            # list of trimmers (see manual)
            trimmer=["ILLUMINACLIP:/net/apps/cbu/stow/Trimmomatic-0.38/adapters/TruSeq3-PE.fa:2:30:10:2:keepBothReads", "LEADING:0", "TRAILING:0", "SLIDINGWINDOW:4:15", "MINLEN:95"],
            # optional parameters
            extra="",
            compression_level="-9"
        threads:
            8
        wrapper:
            "0.66.0/bio/trimmomatic/pe"


rule fastqc_all_trim:
        input: expand("results-fastqc-trimmed/{sample}_R1_fastqc.html", sample=samples),
                expand("results-fastqc-trimmed/{sample}_R2_fastqc.html", sample=samples),
        output: "status/fastqc-trim-complete"
        shell: "touch {output}" #kommentar. Creat output file von output.

rule fastqc_trim:
        input:
                "trimmed/{sample_full}.fastq.gz"
        output:
                html="results-fastqc-trimmed/{sample_full}_fastqc.html",
                zip="results-fastqc-trimmed/{sample_full}_fastqc.zip"
        params: ""
        log:
                "logs/fastqc-trim/{sample_full}.log"
        threads: 1
        wrapper:
                "0.66.0/bio/fastqc"


rule star_index_all:
        input: expand("Genome-index/Genome", sample=samples)
        output: "status/star-index-complete"
        shell: "touch {output}"


rule star_index:
        input:
            fasta = "/export/grellscheidfs/Madelen/test_mouse/Mouse_genome/Mus_musculus.GRCm38.dna.toplevel.fa", # provide your reference FASTA file provide your GTF file
            gtf = "/export/grellscheidfs/Madelen/test_mouse/Mouse_genome/Mus_musculus.GRCm38.101.gtf"
        output:
            directory("Genome-index")
        message:
            "Testing STAR index"
        shell:
            "STAR --runMode genomeGenerate --limitGenomeGenerateRAM 33524373088 --runThreadN 12 --genomeDir Genome-index --genomeFastaFiles {input.fasta} --sjdbOverhang 99 --sjdbGTFfile {input.gtf}"


#rule star_pe_all: 
        #input: expand("STAR/{sample}/", sample=samples)
        #output: "status/star-pe-multi-complete" 
        #shell: "touch {output}" 


rule star_pe_multi: 
        input: 
                fq1 = "trimmed/{sample}_R1.fastq.gz",
                fq2 = "trimmed/{sample}_R2.fastq.gz", 
                index =  directory("Genome-index"), 
        output: 
                "STAR/{sample}/Aligned.sortedByCoord.out.bam" 
        log: 
                "logs/star/pe/{sample}.log" 
        params: 
                index = "/export/grellscheidfs/Madelen/Snakemake_dataset/Genome-index", 
                extra = "--outSAMtype BAM SortedByCoordinate --twopassMode Basic --limitSjdbInsertNsj 1500000 --outSAMmultNmax 1 --quantMode TranscriptomeSAM GeneCounts --outFilterMatchNmin 95",  
                prefix = "STAR/{sample}/",
        threads: 
                8
        shell:
                "STAR {params.extra} --runThreadN {threads} \
                        --genomeDir {params.index} \
                        --readFilesIn {input.fq1} {input.fq2} \
                        --readFilesCommand zcat \
                        --outFileNamePrefix {params.prefix}" 


def absolute_path(group):  
    list = []
    #try: 
    #    open(files, 'w') #Create text file
    #except OSError: 
    #    print('Failed creating the file')
    #else: 
    #    print('File created')
    for fname in parts: #Go through the files in samtools-sort
        print(fname)
        print(group)
        if (str(group) == fname[4:]): #check if the file ends with the correct characters 
            p = os.path.abspath(f"samtools-sort/{fname}.bam") #get absolute path of file 
            list.append(p) 
            print(list)
    file_paths = ','.join(list)
    write_path = f"samtools-sort/{group}.txt"
    print(f"write_path = {write_path}")
    with open(write_path, "w") as file:
        file.write(file_paths) #write the paths to text file 
    return file_paths



rule PRPF31_file:
    input:
        expand("samtools-index/{part}.bam.bai", part=parts)
    output:
        "samtools-sort/{group}.txt"
    log: "logs/PRPF31-create-{group}.txt"
    run: absolute_path(wildcards.group)



#rule rmats:
#    input:
#        gtf = "/export/grellscheidfs/Madelen/test_mouse/Mouse_genome/Mus_musculus.GRCm38.101.gtf",
#        b1 = expand("samtools-sort/{group}.txt",group=["PRPF31","SCR"]),
#        hups = expand("samtools-index/{part}.bam.bai", part=parts),
#        #b2 = "samtools-sort/{group}.txt",
#    output:
#        od = directory("results-rmats"),
#        tmp = temp(directory("temp-rmats")),#with temp() the directories will deleted afterwards
#        flag = temp(touch("results-rmats/flag"))#Snakemake wants for every input an output file. As we create only directories, we fake snakemake with a fake ouptut-file using variables (group). 
#    params:
#        # optional parameters
#        extra="-t paired --readLength 95",
#    threads: 24
#    log: "logs/rmats_logfile_{group}.txt"
#    shell:
#        "rmats-corrected.py --b1 {input.b1[0]} --b2 {input.b1[1]} --gtf {input.gtf} {params.extra} --nthread {threads} --od {output.od} --tmp {output.tmp} > {log} 2>&1"



#rule rmats:
#    input:
#        gtf = "/export/grellscheidfs/Madelen/test_mouse/Mouse_genome/Mus_musculus.GRCm38.101.gtf",
#        b1 = "/export/grellscheidfs/Madelen/Snakemake_dataset/samtools-sort/PRPF31.txt",
#        b2 = "/export/grellscheidfs/Madelen/Snakemake_dataset/samtools-sort/SCR.txt",
#    output:
#        od = directory("results-rmats"),
#        tmp = temp(directory("temp-rmats")),#with temp() the directories will deleted afterwards
#        flag = temp(touch("results-rmats/flag"))#Snakemake wants for every input an output file. As we create only directories, we fake snakemake with a fake ouptut-file using variables (group). 
#    params:
#        # optional parameters
#        extra="-t paired --readLength 95",
#    threads: 24
#    log: "logs/rmats_logfile_{group}.txt"
#    shell:
#        "rmats-corrected.py --b1 {input.b1} --b2 {input.b2} --gtf {input.gtf} {params.extra} --nthread {threads} --od {output.od} --tmp {output.tmp} > {log} 2>&1"


#rmats-corrected.py --b1 /export/grellscheidfs/Madelen/snakemake_mouse/samtools-sort/AL.txt --b2 /export/grellscheidfs/Madelen/snakemake_mouse/samtools-sort/DR.txt 
#--gtf /export/grellscheidfs/Madelen/test_mouse/Mouse_genome/Mus_musculus.GRCm38.101.gtf -t paired --readLength 95 --nthread 12 
#--od /export/grellscheidfs/Madelen/snakemake_mouse/results-rmats/ --tmp /export/grellscheidfs/Madelen/snakemake_mouse/temp-rmats/

















